version: '3.9'

services:
  # ─────────────────────────────────────────────────────
  # Your databases
  postgres:
    image: postgres:15
    env_file: .env.dev                    # loads POSTGRES_USER, PASSWORD, etc.
    ports: ["5432:5432"]
    volumes:
      - ./infra/db/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "6379:6379"

# ─────────────────────────────────────────────────────
  # Identity Service (auth)
  admin-service:
    build:
      context: .
      dockerfile: services/admin-service/Dockerfile.dev
    ports: ["8000:8000"]
    volumes:
      - .:/app:cached
    env_file:
      - .env.dev
    environment:
      APP_ENV: development
      ENV_PATH: /app/.env.dev
      SERVICE_NAME: admin    # used by your connect.go
      DB_TYPE: postgres
    depends_on: [postgres]

  # ─────────────────────────────────────────────────────
  # Identity Service (auth)
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile.dev
    ports: ["8001:8001"]
    volumes:
      - .:/app:cached
    env_file:
      - .env.dev
    environment:
      APP_ENV: development
      ENV_PATH: /app/.env.dev
      SERVICE_NAME: identity    # used by your connect.go
      DB_TYPE: postgres
    depends_on: [postgres]

 # ─────────────────────────────────────────────────────
  # User Service (user)
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile.dev
    ports: ["8002:8002"]
    volumes:
      - .:/app:cached
    env_file:
      - .env.dev
    environment:
      APP_ENV: development
      ENV_PATH: /app/.env.dev
      SERVICE_NAME: identity    # used by your connect.go
      DB_TYPE: postgres
    depends_on: [auth-service,postgres]

# ─────────────────────────────────────────────────────
  # Party Service (user)
  party-service:
    build:
      context: .
      dockerfile: services/party-service/Dockerfile.dev
    ports: ["8003:8003"]
    volumes:
      - .:/app:cached
    env_file:
      - .env.dev
    environment:
      APP_ENV: development
      ENV_PATH: /app/.env.dev
      SERVICE_NAME: party    # used by your connect.go
      DB_TYPE: postgres
    depends_on: [user-service,postgres]

 # ─────────────────────────────────────────────────────
  # Rating Service (user)
  rating-service:
    build:
      context: .
      dockerfile: services/rating-service/Dockerfile.dev
    ports: ["8004:8004"]
    volumes:
      - .:/app:cached
    env_file:
      - .env.dev
    environment:
      APP_ENV: development
      ENV_PATH: /app/.env.dev
      SERVICE_NAME: rating    # used by your connect.go
      DB_TYPE: mongo
    depends_on: [party-service,mongo]

  # ─────────────────────────────────────────────────────
  # User Ui (web-ui)
  web-ui:
    build:
      context: ./apps/web-ui
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web-ui:/app
      - /app/node_modules  # Prevents node_modules from being overwritten
    env_file:
      - .env.dev
    depends_on:
      - auth-service


  # ─────────────────────────────────────────────────────
  # API Gateway Service
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./apps/api-gateway:/app
      - /app/node_modules
    env_file: .env.dev
    depends_on:
      - auth-service
      - redis
      - postgres
      
  # ─────────────────────────────────────────────────────
  # Mongo for ratings
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db

volumes:
  pgdata:
  mongodata:
